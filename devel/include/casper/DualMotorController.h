// Generated by gencpp from file casper/DualMotorController.msg
// DO NOT EDIT!


#ifndef CASPER_MESSAGE_DUALMOTORCONTROLLER_H
#define CASPER_MESSAGE_DUALMOTORCONTROLLER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace casper
{
template <class ContainerAllocator>
struct DualMotorController_
{
  typedef DualMotorController_<ContainerAllocator> Type;

  DualMotorController_()
    : header()
    , M1DIR(0)
    , M2DIR(0)
    , M1PWM(0.0)
    , M2PWM(0.0)  {
    }
  DualMotorController_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , M1DIR(0)
    , M2DIR(0)
    , M1PWM(0.0)
    , M2PWM(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _M1DIR_type;
  _M1DIR_type M1DIR;

   typedef int64_t _M2DIR_type;
  _M2DIR_type M2DIR;

   typedef double _M1PWM_type;
  _M1PWM_type M1PWM;

   typedef double _M2PWM_type;
  _M2PWM_type M2PWM;





  typedef boost::shared_ptr< ::casper::DualMotorController_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::casper::DualMotorController_<ContainerAllocator> const> ConstPtr;

}; // struct DualMotorController_

typedef ::casper::DualMotorController_<std::allocator<void> > DualMotorController;

typedef boost::shared_ptr< ::casper::DualMotorController > DualMotorControllerPtr;
typedef boost::shared_ptr< ::casper::DualMotorController const> DualMotorControllerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::casper::DualMotorController_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::casper::DualMotorController_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::casper::DualMotorController_<ContainerAllocator1> & lhs, const ::casper::DualMotorController_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.M1DIR == rhs.M1DIR &&
    lhs.M2DIR == rhs.M2DIR &&
    lhs.M1PWM == rhs.M1PWM &&
    lhs.M2PWM == rhs.M2PWM;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::casper::DualMotorController_<ContainerAllocator1> & lhs, const ::casper::DualMotorController_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace casper

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::casper::DualMotorController_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::casper::DualMotorController_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::casper::DualMotorController_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::casper::DualMotorController_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::casper::DualMotorController_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::casper::DualMotorController_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::casper::DualMotorController_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8851bbde2e6ab82060d8c2f1d601e8f0";
  }

  static const char* value(const ::casper::DualMotorController_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8851bbde2e6ab820ULL;
  static const uint64_t static_value2 = 0x60d8c2f1d601e8f0ULL;
};

template<class ContainerAllocator>
struct DataType< ::casper::DualMotorController_<ContainerAllocator> >
{
  static const char* value()
  {
    return "casper/DualMotorController";
  }

  static const char* value(const ::casper::DualMotorController_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::casper::DualMotorController_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"int64 M1DIR\n"
"int64 M2DIR\n"
"float64 M1PWM\n"
"float64 M2PWM\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::casper::DualMotorController_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::casper::DualMotorController_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.M1DIR);
      stream.next(m.M2DIR);
      stream.next(m.M1PWM);
      stream.next(m.M2PWM);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DualMotorController_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::casper::DualMotorController_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::casper::DualMotorController_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "M1DIR: ";
    Printer<int64_t>::stream(s, indent + "  ", v.M1DIR);
    s << indent << "M2DIR: ";
    Printer<int64_t>::stream(s, indent + "  ", v.M2DIR);
    s << indent << "M1PWM: ";
    Printer<double>::stream(s, indent + "  ", v.M1PWM);
    s << indent << "M2PWM: ";
    Printer<double>::stream(s, indent + "  ", v.M2PWM);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CASPER_MESSAGE_DUALMOTORCONTROLLER_H
